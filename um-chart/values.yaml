# Default values for um-microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
 # registry: 192.170.10.40
#  repository: {{ .Values.image.registry }}/innoeye/app-service
  repository: 192.168.4.235:5000/um-microservice
  tag: "2.0.0"
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rollingUpdate:
  maxSurge: 50%
  maxUnavailable: 50%

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: /um/actuator/prometheus
  prometheus.io/scheme: http
  prometheus.io/port: "9019"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 9019 

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

virtualService:
  enabled: false
  context: /um
  hosts: "*" 
  gateways: fs-gateway

# Resource limit availble on node
resourcesLimits:
  cpu: 1
  memory: 5G

# Resoucr Requested for container
requestsResources:
  cpu: 1
  memory: 5G


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}



#READYNESS

livenessProbe:
  enable: false
  path: /um/rest/ping
  initialDelaySeconds: 300
  periodSeconds: 20
  failureThreshold: 3

readinessProbe:
  path: /um/rest/ping
  initialDelaySeconds: 60
  periodSeconds: 10

ports:
  containerPort: 9019


## FOR VOLUME MOUNTS

volumeMounts:
  protectedPath: /protected
  sharedPath: /data/report
  hadoopPath: /usr/hdp/current/hadoop-client/conf
  hbasePath: /usr/hdp/current/hbase-client/conf
  appServerBuild: /opt/foresight/foresight-app/


##FOR VOLUMES
nfs:
   hostpath: true
   asServer: false
volumeName:
  sharedDir1: shared-vol1
  #sharedDir2: shared-vol2
volumes:
  nfsServerUrl: 192.168.4.235
  nfsServerPath: /cluster-nfs/um
## 
configMap:
  defaultMode: 0755
## FOR ENV

env:
    mysqlUrl: "xRB9dqm8lgrtuLlLQt/IxluY2l66iO21F5mG8Z99QpIkT0UZ0zIy/Gf7AWPZJ3iGNObRsmeuy1Ob53Dnsb3+W49Yfmd/UgWfJX6Ht0znOROejUYrKOJx8wam/T/Ua4y91Khxq93JD/hWCVVDmTON6DNtyNtNC30pPVCGfN21buf3KI8KjIubte3Kbn3Dqon7ftfo2EU7LrrDlvzVe0MRdw=="
    mysqlUsername: "Z/Otj52OSL7gB2MOJ38ncA=="
    mysqlChecksum: "ZKRKQwgQW1sEMbTFtDmnLQ=="
    ipv6: false
    serviceContext: "/um"
    serviceJavamelodyUserpass: "cHJvZHVjdDpwcm9kdWN0Cg=="
    # redisSenitalList: "lj4j9n7g1fjW43/64LF417Q15+yk36v8ZTwKVuS/rfRv+xq7qOSetPXgmEb1S6KipYbTjOXTBtO/ViVmv0sy847vpdVobnLueW+E/GDzKIITnFf40ytfLbcbcSwVy+30,lj4j9n7g1fjW43/64LF415DeayaMPwEES2zdCIUVVWCGT4MaBc2WXknbcfdOm5LprCkL8fFsSNvzyDCmmyxbNvXLdb4I+7HPg7WY8bYQFE9i8iZ+8bv2WABiOhwYwIlg,lj4j9n7g1fjW43/64LF41zpB5FnnqbDIoBuqYf6SjQd0ctjTQlMdEVi5Ahd9hlI6zLFmWOJPvxPJZN3bN72p8mRrGehiIDnJV//SAY2d+y/tPZz5bqk7/eX+d1PXWCGU"
    redisSenitalList: "lj4j9n7g1fjW43/64LF417Q15+yk36v8ZTwKVuS/rfQ0BUKdly/O7WHOskMf3YMg5J+LDFCi1Q6BMNyu5h2pJTe66ZmPbjFC/tD7GZR7R3k=,lj4j9n7g1fjW43/64LF415DeayaMPwEES2zdCIUVVWD9awkkyiueKcMoca5oGKd3smGYlSFqMQp7EqEBPAKo1IKajtxLb8H/SOMWwaGV9Ro=,lj4j9n7g1fjW43/64LF41zpB5FnnqbDIoBuqYf6SjQfCzYaHiQybdkdwnNus3xNNDHQiH5evYNWdmFQETu3FqB6YuZQO7v054nTFUX7Zxkw="
    redisMaster: "tHSoqN4LH8Ae9+HrbpKIXg=="
    redisMasterAuth: "7+izoW1FilKhEwNRfy2hww=="
    redisSenitalEnable: "B6V+uDmE1LvqI+UAcULNtg=="
    auditKafkaServiceEnable: "false"
    microServiceBaseUrl: "6ktSAougutk8Letqp/jddMDL/MmPHkD7ZSQo7fOyQx0="
    attachmentServiceBaseUrl: "uXzOYkoZheGJAi8jY/N6hMSkw/BfugJlf3I5lFOPu24DB7EXQhLGAKRwkK6s5f+E"
    nodeServiceBaseUrl: "kH0p345LQ0hyKeEn8IammBzUAarPvHDWn0da0HuaL/s="
    apacheDownloadBaseUrl: ""
    Xmx: "5g"
    Xms: "1g"
    idpUrl : "/fEd4ZemHrtcT7CW9N3wBub5pb40JMf+0BWJmmYx6MJKjXL/aJuBTi2GYdEaOb0s"
    isRolePermissionSyncEnable: "B6V+uDmE1LvqI+UAcULNtg=="
    geoUrl: ""
    platformUrl: "http://platform-service/platform/utility/rest"
    notificationUrl: ""
    metaServiceUrl: ""
   # minioBucketName: "0EGje7hZv1vghvM7OvhkvhbbKPlYitRxRXG/fLUN2UY="
    minioBucketName: "wDvxlncFN6Wbu5RidvHGcYb1nOKYDesJpa/sbYxOeGM="
    nginxEnable : "B6V+uDmE1LvqI+UAcULNtg=="
    springKafkaProducerBootstrap : "oss-kafka-broker.t001-u000028.svc.cluster.local:9092"
    springKafkaConsumerBootstrap : "oss-kafka-broker.t001-u000028.svc.cluster.local:9092"
    auditKafkaServiceEnable : "false"
    kafkaAuditableTopic : "AuditKafka"
    storageNfsAvailable : "QGEz1iVJSeyTW1dL+HosCg=="
    jwtFilterEnable : "QGEz1iVJSeyTW1dL+HosCg=="
    commonsStorageType : "local"
    commonsStorageEndPoint : "+Yy4nU32pLdqCDBA3kwVC+r2M/rhqa7V9sNjFPjC2sHBAyrpXc7E5g0XrkzaRHJP"
    commonsStorageAccessKey : "LwjBvQ5YQ0kS32zRrfi3FcbNn6u4HbeVHw6O4Q2Hqqc="
    commonsStorageSecretKey : "mHf99woaXOxfC89n73H8DNMvOIV0thId/gwjbDv2D4r19FwLwz/QkJzU0QFtuffz"
    kafkaIPS: ""
